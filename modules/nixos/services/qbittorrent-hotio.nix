# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}: let
  cfg = config.myNixOS.services.qbittorrent-hotio;
  UID = 888;
  GID = 888;
in {
  options.myNixOS.services.qbittorrent-hotio = {
    enable = lib.mkEnableOption "qBittorrent hotio container";

    dataDir = lib.mkOption {
      type = lib.types.path;
      default = "/var/lib/qbittorrent-hotio";
      description = "The directory where qBittorrent stores its data files.";
    };

    downloadDir = lib.mkOption {
      type = lib.types.path;
      default = "/mnt/data/downloads";
      description = "The directory where qBittorrent downloads files";
    };

    user = lib.mkOption {
      type = lib.types.str;
      default = "qbittorrent";
      description = "User account under which qBittorrent runs.";
    };

    group = lib.mkOption {
      type = lib.types.str;
      default = "qbittorrent";
      description = "Group under which qBittorrent runs.";
    };

    port = lib.mkOption {
      type = lib.types.port;
      default = 8080;
      description = "qBittorrent web UI port.";
    };
  };
  config = lib.mkIf cfg.enable {
    # Runtime
    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
      dockerCompat = true;
    };

    # Enable container name DNS for all Podman networks.
    networking.firewall.interfaces = let
      matchAll =
        if !config.networking.nftables.enable
        then "podman+"
        else "podman*";
    in {
      "${matchAll}".allowedUDPPorts = [53];
    };

    virtualisation.oci-containers.backend = "podman";

    # Containers
    virtualisation.oci-containers.containers."qbittorrent" = {
      image = "ghcr.io/hotio/qbittorrent";
      environment = {
        "LIBTORRENT" = "v1";
        "PGID" = toString config.users.groups."${cfg.user}".gid;
        "PUID" = toString config.users.users."${cfg.user}".uid;
        "TZ" = config.time.timeZone;
        "UMASK" = "002";
        "PRIVOXY_ENABLED" = "false";
        "UNBOUND_ENABLED" = "false";
        "VPN_AUTO_PORT_FORWARD" = "true";
        "VPN_AUTO_PORT_FORWARD_TO_PORTS" = "";
        "VPN_CONF" = "wg0";
        "VPN_PROVIDER" = "proton";
        "VPN_ENABLED" = "true";
        "VPN_FIREWALL_TYPE" = "auto";
        "VPN_HEALTHCHECK_ENABLED" = "false";
        "VPN_LAN_LEAK_ENABLED" = "false";
        "VPN_LAN_NETWORK" = "192.168.1.0/24";
        "VPN_NAMESERVERS" = "";
        "WEBUI_PORTS" = "8080/tcp,8080/udp";
      };
      volumes = [
        "${cfg.downloadDir}:/data/downloads:rw"
        "${cfg.dataDir}:/config:rw"
      ];
      ports = [
        "${toString cfg.port}:8080/tcp"
      ];
      log-driver = "journald";
      extraOptions = [
        "--cap-add=NET_ADMIN"
        "--device=/dev/net/tun:/dev/net/tun:rwm"
        "--hostname=container-name.internal"
        "--network-alias=qbittorrent"
        "--network=qbittorrent-hotio_default"
        "--sysctl=net.ipv4.conf.all.src_valid_mark=1"
        "--sysctl=net.ipv6.conf.all.disable_ipv6=1"
      ];
    };
    systemd.services."podman-qbittorrent" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "no";
      };
      after = [
        "podman-network-qbittorrent-hotio_default.service"
      ];
      requires = [
        "podman-network-qbittorrent-hotio_default.service"
      ];
      partOf = [
        "podman-compose-qbittorrent-hotio-root.target"
      ];
      wantedBy = [
        "podman-compose-qbittorrent-hotio-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-qbittorrent-hotio_default" = {
      path = [pkgs.podman];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f qbittorrent-hotio_default";
      };
      script = ''
        podman network inspect qbittorrent-hotio_default || podman network create qbittorrent-hotio_default
      '';
      partOf = ["podman-compose-qbittorrent-hotio-root.target"];
      wantedBy = ["podman-compose-qbittorrent-hotio-root.target"];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-qbittorrent-hotio-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = ["multi-user.target"];
    };
    users.users = lib.mkIf (cfg.user == "qbittorrent") {
      qbittorrent = {
        inherit (cfg) group;
        uid = UID;
      };
    };

    users.groups =
      lib.mkIf (cfg.group == "qbittorrent") {qbittorrent = {gid = GID;};};
  };
}
